using BookLibrary.Server.Application.DTOs;
using BookLibrary.Server.Application.DTOs.User;
using BookLibrary.Server.Application.Services.Interface;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace BookLibrary.Server.Host.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController(IUserService userService, ILogger<UserController> logger) : BaseController(logger)
    {
        [HttpGet("all")]
        public async Task<IActionResult> GetAll([FromQuery] GetUsersQuery query)
        {
            var serviceResult = await userService.GetUsers(query);
            return serviceResult != null && serviceResult.IsSuccess
               ? LogAndResponse<ICollection<UserDto>>(serviceResult, successStatusCode: StatusCodes.Status200OK)
               : LogAndResponse<ICollection<UserDto>>(serviceResult!, failureStatusCode: StatusCodes.Status400BadRequest);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(string id, [FromQuery] string? includeProperties = null)
        {
            var serviceResult = await userService.GetUserById(id, includeProperties);
            return serviceResult != null && serviceResult.IsSuccess
               ? LogAndResponse<UserDto>(serviceResult, successStatusCode: StatusCodes.Status200OK)
               : LogAndResponse<UserDto>(serviceResult!, failureStatusCode: StatusCodes.Status400BadRequest);
        }
    }

}
